# 2 "SQLToHaxeLexer.mll"
 
  open SQLToHaxeParser;;
  open Lexing;;
  let string_chars s = String.sub s 1 ((String.length s)-2) ;;
  
  (*Keywords are not case sensitive.
  Column names, table names are case sensitive.*)
  
  let keywords = 
    [ 
      ("BOOL", BOOL);
      ("CHARSET", CHARSET);
      ("BOOLEAN", BOOL);
      ("DROP", DROP);
      ("EXISTS", EXISTS);
      ("INSERT", INSERT);
      ("INTO", INTO);
      ("VALUES", VALUES);
      ("COMMENT", COMMENT);
      ("AUTO_INCREMENT", AUTO_INCREMENT);
      ("DEFAULT", DEFAULT);
      ("CHECK", CHECK);
      ("KEY", KEY);
      ("CREATE", CREATE);
      ("ROW_FORMAT", ROW_FORMAT);
      ("TABLE", TABLE);
      ("PRIMARY", PRIMARY);
      ("FOREIGN", FOREIGN);
      ("TYPE", TYPE);
      ("ENGINE", ENGINE);
      ("DATETIME", DATETIME);
      ("VARCHAR", VARCHAR);
      ("COLLATE",COLLATE);
      ("TEMPORARY", TEMPORARY);
      ("IF", IF);
      ("ASC", ASC);
      ("DESC", DESC);
      ("NOT", NOT);
      ("UNIQUE", UNIQUE);
      ("BIT", BIT);
      ("TINYINT", TINYINT);
      ("SMALLINT", SMALLINT);
      ("MEDIUMINT", MEDIUMINT);
      ("INDEX", INDEX);
      ("KEY", KEY);
      ("INT", INTEGERTOKEN);
      ("BIGINT", BIGINT);
      ("REAL", REALTOKEN);
      ("DOUBLE", DOUBLETOKEN);
      ("FLOAT", FLOATTOKEN);
      ("DECIMAL", DECIMALTOKEN);
      ("NUMERIC", NUMERICTOKEN);
      ("DATE", DATETOKEN);
      ("TIME", TIMETOKEN);
      ("TIMESTAMP", TIMESTAMPTOKEN);
      ("DATETIME", DATETIMETOKEN);
      ("YEAR", YEARTOKEN);
      ("CHAR", CHARACTER);
      ("CHARACTER", CHARACTER);
      ("COLLATION", COLLATION);
      ("BINARY", BINARY);
      ("VARBINARY", VARBINARY);
      ("TINYBLOB", TINYBLOB);
      ("BLOB", BLOB);
      ("MEDIUMBLOB", MEDIUMBLOB);
      ("LONGBLOB", LONGBLOB);
      ("TEXT", TEXT);
      ("TINYTEXT", TINYTEXT);
      ("MEDIUMTEXT", MEDIUMTEXT);
      ("LONGTEXT", LONGTEXT);
      ("ENUM", ENUM);
      ("REFERENCES", REFERENCES);
      ("MATCH", MATCH);
      ("FULL", FULL);
      ("PARTIAL", PARTIAL);
      ("SIMPLE", SIMPLE);
      ("ON", ON);
      ("UPDATE", UPDATE);
      ("DELETE", DELETE);
      ("RESTRICT" , RESTRICT);
      ("CASCADE", CASCADE);
      ("SET", SET);
      ("NULL", NULL);
      ("NO", NO);
      ("ACTION", ACTION);
      ("USING", USING);
      ("BTREE", BTREE);
      ("HASH", HASH);
      ("RTREE", RTREE)
      ]

  let symbolTable = Hashtbl.create 100;;
  let loadKeywords aList aTable = List.iter (fun (x,y) -> Hashtbl.add aTable x y) keywords;;
  loadKeywords keywords symbolTable;;
  let incr_linenum lexbuf =     
    let pos = lexbuf.Lexing.lex_curr_p in
    lexbuf.Lexing.lex_curr_p <- { pos with
      Lexing.pos_lnum = pos.Lexing.pos_lnum + 1;
      Lexing.pos_bol = pos.Lexing.pos_cnum - pos.Lexing.pos_bol;
      Lexing.pos_cnum = 0
    }
  let ident (tokenText : string) = 
    let convertCase = String.uppercase tokenText in
    if Hashtbl.mem symbolTable convertCase then 
    let result = Hashtbl.find symbolTable convertCase in
      Printf.printf "ident %s \n" tokenText;
      result
    else 
      let result = ID(tokenText) in
        Printf.printf "ident %s\n" tokenText;
        result;;


# 116 "SQLToHaxeLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\240\255\027\000\003\000\001\000\244\255\245\255\246\255\
    \247\255\001\000\248\255\249\255\250\255\001\000\076\000\219\000\
    \154\000\252\255\176\000\164\000\186\000\038\001\198\000\048\001\
    \123\001\251\255\243\255\242\255\241\255\002\000\254\255\004\000\
    \255\255\004\000\254\255\011\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\001\000\001\000\002\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\002\000\003\000\004\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\030\000\000\000\255\255\
    \000\000\034\000\000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\010\000\010\000\032\000\009\000\032\000\031\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\000\000\004\000\026\000\000\000\000\000\000\000\003\000\
    \006\000\005\000\027\000\025\000\011\000\016\000\035\000\013\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\036\000\007\000\000\000\008\000\000\000\000\000\
    \000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\000\000\000\000\000\000\000\000\014\000\
    \002\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\028\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\000\000\
    \000\000\000\000\000\000\014\000\000\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\017\000\
    \000\000\000\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\020\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\019\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \001\000\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\020\000\000\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\019\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\014\000\014\000\014\000\014\000\
    \023\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
    \000\000\000\000\014\000\000\000\014\000\014\000\014\000\014\000\
    \023\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\000\000\019\000\000\000\000\000\000\000\000\000\
    \000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\019\000\000\000\000\000\000\000\014\000\
    \000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
    \000\000\000\000\014\000\000\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\009\000\029\000\000\000\031\000\029\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\004\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\003\000\013\000\000\000\000\000\033\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\035\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\002\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\255\255\
    \255\255\255\255\255\255\014\000\255\255\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\016\000\
    \255\255\255\255\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\018\000\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\255\255\018\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \000\000\004\000\029\000\003\000\033\000\255\255\255\255\255\255\
    \255\255\015\000\255\255\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\018\000\255\255\255\255\
    \255\255\255\255\255\255\002\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\255\255\255\255\
    \255\255\255\255\015\000\255\255\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\255\255\021\000\255\255\255\255\255\255\255\255\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\021\000\255\255\255\255\255\255\023\000\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\255\255\255\255\
    \255\255\255\255\024\000\255\255\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
  __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 141 "SQLToHaxeLexer.mll"
           ( INT ( int_of_string(Lexing.lexeme lexbuf)))
# 319 "SQLToHaxeLexer.ml"

  | 1 ->
# 142 "SQLToHaxeLexer.mll"
             (FLOAT (float_of_string (Lexing.lexeme lexbuf)))
# 324 "SQLToHaxeLexer.ml"

  | 2 ->
# 143 "SQLToHaxeLexer.mll"
          (
      ident (Lexing.lexeme lexbuf))
# 330 "SQLToHaxeLexer.ml"

  | 3 ->
# 145 "SQLToHaxeLexer.mll"
                  (comment lexbuf)
# 335 "SQLToHaxeLexer.ml"

  | 4 ->
# 146 "SQLToHaxeLexer.mll"
                      (alt_comment lexbuf)
# 340 "SQLToHaxeLexer.ml"

  | 5 ->
# 147 "SQLToHaxeLexer.mll"
          (token lexbuf)
# 345 "SQLToHaxeLexer.ml"

  | 6 ->
# 148 "SQLToHaxeLexer.mll"
          (COMMA)
# 350 "SQLToHaxeLexer.ml"

  | 7 ->
# 149 "SQLToHaxeLexer.mll"
            (incr_linenum lexbuf; token lexbuf)
# 355 "SQLToHaxeLexer.ml"

  | 8 ->
# 150 "SQLToHaxeLexer.mll"
           (EQUALS)
# 360 "SQLToHaxeLexer.ml"

  | 9 ->
# 151 "SQLToHaxeLexer.mll"
               (SEMI_COLON)
# 365 "SQLToHaxeLexer.ml"

  | 10 ->
# 152 "SQLToHaxeLexer.mll"
           (LPAREN)
# 370 "SQLToHaxeLexer.ml"

  | 11 ->
# 153 "SQLToHaxeLexer.mll"
           (RPAREN)
# 375 "SQLToHaxeLexer.ml"

  | 12 ->
# 154 "SQLToHaxeLexer.mll"
                      ( ident(string_chars (Lexing.lexeme lexbuf)))
# 380 "SQLToHaxeLexer.ml"

  | 13 ->
# 155 "SQLToHaxeLexer.mll"
                      ( ident(string_chars (Lexing.lexeme lexbuf)))
# 385 "SQLToHaxeLexer.ml"

  | 14 ->
# 156 "SQLToHaxeLexer.mll"
                      ( ident(string_chars (Lexing.lexeme lexbuf)))
# 390 "SQLToHaxeLexer.ml"

  | 15 ->
# 157 "SQLToHaxeLexer.mll"
        (EOF)
# 395 "SQLToHaxeLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
  __ocaml_lex_comment_rec lexbuf 29
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 159 "SQLToHaxeLexer.mll"
            ( 
    token lexbuf)
# 407 "SQLToHaxeLexer.ml"

  | 1 ->
# 161 "SQLToHaxeLexer.mll"
      (comment lexbuf)
# 412 "SQLToHaxeLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and alt_comment lexbuf =
  __ocaml_lex_alt_comment_rec lexbuf 33
and __ocaml_lex_alt_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 163 "SQLToHaxeLexer.mll"
                   (token lexbuf)
# 423 "SQLToHaxeLexer.ml"

  | 1 ->
# 164 "SQLToHaxeLexer.mll"
     (alt_comment lexbuf)
# 428 "SQLToHaxeLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_alt_comment_rec lexbuf __ocaml_lex_state

;;

